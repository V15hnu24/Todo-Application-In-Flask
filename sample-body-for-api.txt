## API Endpoints

1. POST /add-task - To add a task 

The id should be unique and the task should be a string. The request body should be in the following format:

```json
{
    "id": "Task Title",
    "Task": "Task Description"
}
```

=Returns json message of showing the whether the api has executed or not if successfully executed it will return the following message:

```json
{
    "message": "Task added successfully"
}
```

If not error according to the error will be returned


2. DELETE /delete-task/<int:id> - To delete a task

No body just id in the url

Returns json message of showing the whether the api has executed or not if successfully executed it will return the following message:

```json
{
    "message": "Task deleted successfully"
}
```
If not error according to the error will be returned


3. PUT /update-task/<int:id> - To update a task

The request body should be in the following format:

```json
{
    "Status": 0 or 1, // 0 for incomplete and 1 for complete
    "Task": "task"
}
```

4. GET /get-tasks - To view all the tasks

No body just the url

Returns all the tasks in json format


5. GET /get-task/<int:id> - To view a specific task 

No body just id in the url

Returns specific task in json format


6. PUT /mark-task-complete/<int:id> - To mark a task as complete 

id in the url

Returns json message of showing the whether the api has executed or not if successfully executed it will return the following message:

```json
{
    "message": "Task marked as complete"
}
```

If not error according to the error will be returned


7. PUT /mark-task-incomplete/<int:id> - To mark a task as incomplete

id in the url

Returns json message of showing the whether the api has executed or not if successfully executed it will return the following message:

```json
{
    "message": "Task marked as incomplete"
}
```

If not error according to the error will be returned
